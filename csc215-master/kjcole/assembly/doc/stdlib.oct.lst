 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 1 - 12/04/2020 09:35:07 PM


 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 2 - 12/04/2020 09:35:07 PM


       1/       0 :                     	NEWPAGE	0
       2/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3/       0 :                     ;
       4/       0 :                     ; NAME:    stdlib.inc
       5/       0 :                     ; EDITOR:  Kevin Cole ("The Ubuntourist") <kevin.cole@novawebdevelopment.org>
       6/       0 :                     ; LASTMOD: 2020.11.03 (kjc)
       7/       0 :                     ;
       8/       0 :                     ; DESCRIPTION: 
       9/       0 :                     ;
      10/       0 :                     ;     A rudimentary "include" for standard input / output, math,
      11/       0 :                     ;     and conversion functions
      12/       0 :                     ;
      13/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      14/       0 :                     
      15/       0 :                     ;;;;;;;;;;;;;
      16/       0 :                     ; Constants ;
      17/       0 :                     ;;;;;;;;;;;;;
      18/       0 :                     
      19/       0 :                     ; ASCII characters
      20/       0 :                     
      21/       0 : =15O                CR:	EQU	0Dh	; ASCII CR  (Carriage Return, a.k.a. Ctrl-M)
      22/       0 : =12O                LF:	EQU	0Ah	; ASCII LF  (Line Feed        a.k.a. Ctrl-J)
      23/       0 : =33O                ESC:	EQU	1Bh	; ASCII ESC (Escape,          a.k.a. Ctrl-[)
      24/       0 : =0O                 NUL:	EQU	00h	; ASCII NUL (Null)
      25/       0 :                     
      26/       0 :                     ; I/O
      27/       0 :                     
      28/       0 : =20O                SIO1S:	EQU	10h	; Serial I/O communications port 1 STATUS
      29/       0 : =21O                SIO1D:	EQU	11h	; Serial I/O communications port 1 DATA
      30/       0 :                     
      31/       0 : =3O                 MRST:	EQU	03h	; UART Master Reset
      32/       0 : =1O                 RCVD:	EQU	01h	; Character received
      33/       0 : =2O                 SENT:	EQU	002h	; Data sent. Output complete
      34/       0 :                     
      35/       0 :                     ; Code segment
      36/       0 :                     
      37/   10000 :                     	ORG	1000h	; Load at memory location 1000 (hex)
      38/   10000 :                     
      39/   10000 :                     ; Reset serial input / output
      40/   10000 :                     ;
      41/   10000 : 076 003             RSTIO:	MVI	A,MRST
      42/   10002 : 323 020             	OUT	SIO1S	; Reset the UART
      43/   10004 : 076 025             	MVI	A,15h	; Settings: No RI, No XI, RTS Low, 8N1, /16
      44/   10006 : 323 020             	OUT	SIO1S	; Configure the UART with above settings
      45/   10010 : 311                 	RET		; Return
      46/   10011 :                     
      47/   10011 :                     ; Put a character on to the serial I/O bus (stdout)
      48/   10011 :                     ;
      49/   10011 :                     ; Calling sequence:
      50/   10011 :                     ;
      51/   10011 :                     ;	LDAX	register
      52/   10011 :                     ;	CALL	PUTC
      53/   10011 :                     ;
      54/   10011 :                     ; where:
      55/   10011 :                     ;	register contains the ASCII value to be sent
      56/   10011 :                     ;
      57/   10011 :                     
      58/   10011 : 365                 PUTC:	PUSH	PSW	; Preserve Program Status Word
      59/   10012 : 333 020             WAITO:	IN	SIO1S	; Check serial I/O status bit 1 (XMIT status)
      60/   10014 : 346 002             	ANI	SENT	; If data not sent (i.e. XMIT not finished)...
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 3 - 12/04/2020 09:35:07 PM


      61/   10016 : 312 012 020         	JZ	WAITO	; ...spin wheels: continue checking status. Else...
      62/   10021 : 361                 	POP	PSW	; ...restore Program Status Word
      63/   10022 : 323 021             	OUT	SIO1D	; ...output byte
      64/   10024 : 311                 	RET		; ...return
      65/   10025 :                     
      66/   10025 :                     ; Write a null-terminated string out to the serial port (stdout)
      67/   10025 :                     ;
      68/   10025 :                     ; Calling sequence:
      69/   10025 :                     ;
      70/   10025 :                     ;	LXI	B,string
      71/   10025 :                     ;	CALL	WRITE
      72/   10025 :                     ;
      73/   10025 :                     ; where:
      74/   10025 :                     ;	string is the address of a null-terminated ASCII string
      75/   10025 :                     ;
      76/   10025 :                     
      77/   10025 : 012                 WRITE:	LDAX	B	; Fetch byte
      78/   10026 : 376 000             	CPI	NUL	; If byte is ASCII NUL...
      79/   10030 : 310                 	RZ		; ...return. Else...
      80/   10031 : 315 011 020         	CALL	PUTC	; ...output byte
      81/   10034 : 003                 	INX	B	; ...point to next byte
      82/   10035 : 303 025 020         	JMP	WRITE	; ...lather, rinse, repeat: Fetch next byte.
      83/   10040 :                     
      84/   10040 :                     ; Get a character off of the serial I/O bus (stdin)
      85/   10040 :                     ;
      86/   10040 : 365                 GETC:	PUSH	PSW	; Preserve Program Status Word
      87/   10041 : 333 020             WAITI:	IN	SIO1S	; Check serial I/O status bit
      88/   10043 : 346 001             	ANI	RCVD	; If no data received...
      89/   10045 : 312 041 020         	JZ	WAITI	; ...spin wheels: continue checking status. Else...
      90/   10050 : 361                 	POP	PSW	; ...restore Program Status Word
      91/   10051 : 333 021             	IN	SIO1D	; ...read the character
      92/   10053 : 323 021             	OUT	SIO1D	; ...echo it
      93/   10055 : 311                 	RET		; ...return
      94/   10056 :                     
      95/   10056 :                     ; Read one line (CR- or LF-terminated string) from the serial port (stdin)
      96/   10056 :                     ;
      97/   10056 :                     ; Calling sequence:
      98/   10056 :                     ;
      99/   10056 :                     ;	LXI	B,buffer
     100/   10056 :                     ;	CALL	READ
     101/   10056 :                     ;
     102/   10056 :                     ; where:
     103/   10056 :                     ;	buffer is the address of a byte array for storing the string
     104/   10056 :                     ;
     105/   10056 :                     
     106/   10056 : 315 040 020         READ:	CALL	GETC	; Fetch byte
     107/   10061 : 376 015             	CPI	CR	; If byte is an ASCII CR (Carriage Return)...
     108/   10063 : 312 110 020         	JZ	CRLF	; ...add LF and return. Else...
     109/   10066 : 376 012             	CPI	LF	; ...if byte is an ASCII LF (Line Feed)...
     110/   10070 : 312 100 020         	JZ	LFCR	; ...add CR and return. Else...
     111/   10073 : 002                 	STAX	B	; ...store byte in buffer
     112/   10074 : 003                 	INX	B	; ...point to next empty byte
     113/   10075 : 303 056 020         	JMP	READ	; ...lather, rinse, repeat: Fetch next byte.
     114/   10100 : 076 015             LFCR:	MVI	A,CR
     115/   10102 : 315 011 020         	CALL	PUTC	; Print a CR
     116/   10105 : 303 115 020         	JMP	TERM	; Terminate the input string
     117/   10110 : 076 012             CRLF:	MVI	A,LF
     118/   10112 : 315 011 020         	CALL	PUTC	; Print a LF
     119/   10115 : 076 000             TERM:	MVI	A,NUL	; Null terminator
     120/   10117 : 002                 	STAX	B	; Terminate the input string
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 4 - 12/04/2020 09:35:07 PM


     121/   10120 : 311                 	RET		; Return
     122/   10121 :                     
     123/   10121 :                     ; Multiply multiplicand by multiplier
     124/   10121 :                     ;
     125/   10121 :                     ; Calling sequence:
     126/   10121 :                     ;
     127/   10121 :                     ;	LXI	C,multiplier
     128/   10121 :                     ;	LXI	D,multiplicand
     129/   10121 :                     ;	CALL	MULTI
     130/   10121 :                     ;
     131/   10121 :                     ; where:
     132/   10121 :                     ;	multiplier   is one of the two numbers to be multiplied
     133/   10121 :                     ;	multiplicand is the other number to be multiplied
     134/   10121 :                     ;
     135/   10121 :                     ; returns:
     136/   10121 :                     ;	product in register pair BC
     137/   10121 :                     
     138/   10121 : 365                 MULTI:	PUSH	PSW
     139/   10122 : 006 000             	MVI	B,0	; Initialize most significant byte of result
     140/   10124 : 036 011             	MVI	E,9	; Bit counter
     141/   10126 : 171                 MULT0:	MOV	A,C	; Rotate least significant bit of...
     142/   10127 : 037                 	RAR		; ...multiplier to carry and shift...
     143/   10130 : 117                 	MOV	C,A	; ...low-order byte of result
     144/   10131 : 035                 	DCR	E	; Countdown to zero (decrement bit counter)
     145/   10132 : 312 147 020         	JZ	MULT2	; If zeroed, we're done
     146/   10135 : 170                 	MOV	A,B
     147/   10136 : 322 142 020         	JNC	MULT1	; If carry bit = 1...
     148/   10141 : 202                 	ADD	D	; ...add multiplicand to high-order byte
     149/   10142 : 037                 MULT1:	RAR		; Else... shift high-order byte of result
     150/   10143 : 107                 	MOV	B,A
     151/   10144 : 303 126 020         	JMP	MULT0	; Lather, rinse, repeat
     152/   10147 : 361                 MULT2:	POP	PSW
     153/   10150 : 311                 	RET		; Return
     154/   10151 :                     
     155/   10151 :                     ; Divide dividend by divisor
     156/   10151 :                     ;
     157/   10151 :                     ; Calling sequence:
     158/   10151 :                     ;
     159/   10151 :                     ;	MVI	B,00h
     160/   10151 :                     ;	MVI	C,dividend
     161/   10151 :                     ;	MVI	D,00h
     162/   10151 :                     ;	MVI	E,divisor
     163/   10151 :                     
     164/   10151 :                     ;	CALL	DIVI
     165/   10151 :                     ;
     166/   10151 :                     ; where:
     167/   10151 :                     ;	dividend is the number to be divided
     168/   10151 :                     ;	divisor  is the number to divide by
     169/   10151 :                     ;
     170/   10151 :                     ; returns:
     171/   10151 :                     ;	quotient  in register pair BC
     172/   10151 :                     ;	remainder in register pair DE
     173/   10151 :                     
     174/   10151 : 365                 DIVI:	PUSH	PSW
     175/   10152 : 172                 	MOV	A,D	; Negate the divisor
     176/   10153 : 057                 	CMA		;    "    "     "
     177/   10154 : 127                 	MOV	D,A	;    "    "     "
     178/   10155 : 173                 	MOV	A,E	;    "    "     "
     179/   10156 : 057                 	CMA		;    "    "     "
     180/   10157 : 137                 	MOV	E,A	;    "    "     "
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 5 - 12/04/2020 09:35:07 PM


     181/   10160 : 023                 	INX	D	; For two's complement
     182/   10161 : 041 000 000         	LXI	H,00h	; Initial value for remainder
     183/   10164 : 076 021             	MVI	A,11h	; Initialize loop counter
     184/   10166 : 345                 DV0:	PUSH	H	; Save remainder
     185/   10167 : 031                 	DAD	D	; Subtract divisor (add negative)
     186/   10170 : 322 174 020         	JNC	DV1	; Underflow. Restore register pair HL
     187/   10173 : 343                 	XTHL
     188/   10174 : 341                 DV1:	POP	H
     189/   10175 : 365                 	PUSH	PSW	; Save loop counter
     190/   10176 :                     
     191/   10176 :                     	; 4 register left shift
     192/   10176 :                     	; Carry->C->B->L->H
     193/   10176 :                     
     194/   10176 : 171                 	MOV	A,C
     195/   10177 : 027                 	RAL
     196/   10200 : 117                 	MOV	C,A
     197/   10201 :                     
     198/   10201 : 170                 	MOV	A,B
     199/   10202 : 027                 	RAL
     200/   10203 : 107                 	MOV	B,A
     201/   10204 :                     
     202/   10204 : 175                 	MOV	A,L
     203/   10205 : 027                 	RAL
     204/   10206 : 157                 	MOV	L,A
     205/   10207 :                     
     206/   10207 : 174                 	MOV	A,H
     207/   10210 : 027                 	RAL
     208/   10211 : 147                 	MOV	H,A
     209/   10212 :                     
     210/   10212 : 361                 	POP	PSW	; Restore loop counter (A)
     211/   10213 : 075                 	DCR	A	; Decrement loop counter
     212/   10214 : 302 166 020         	JNZ	DV0	; Lather, rinse, repeat
     213/   10217 :                     
     214/   10217 :                     	; Post-divide clean-up:
     215/   10217 :                     	; Shift remainder right and return in DE
     216/   10217 :                     
     217/   10217 : 267                 	ORA	A
     218/   10220 :                     
     219/   10220 : 174                 	MOV	A,H
     220/   10221 : 037                 	RAR
     221/   10222 : 127                 	MOV	D,A	; Store shifted H in D
     222/   10223 :                     
     223/   10223 : 175                 	MOV	A,L
     224/   10224 : 037                 	RAR
     225/   10225 : 137                 	MOV	E,A	; Store shifted L in E
     226/   10226 :                     
     227/   10226 : 361                 	POP	PSW
     228/   10227 : 311                 	RET
     229/   10230 :                     
     230/   10230 :                     ; Convert a NULL-terminated string to an integer
     231/   10230 :                     ;
     232/   10230 :                     ; Calling sequence:
     233/   10230 :                     ;
     234/   10230 :                     ;	LXI	B,string
     235/   10230 :                     ;	CALL	INT
     236/   10230 :                     ;
     237/   10230 :                     ; where:
     238/   10230 :                     ;	string is the address of a string of ASCII digits
     239/   10230 :                     ;
     240/   10230 :                     
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 6 - 12/04/2020 09:35:07 PM


     241/   10230 : 041 000 000         INT:	LXI	H,0000h	; Initialize subtotal
     242/   10233 : 026 000             	MVI	D,00h
     243/   10235 :                     
     244/   10235 : 012                 CHAR:	LDAX	B	; Fetch char and load into accumulator
     245/   10236 : 326 071             	SUI	39h	; If ASCII value > "9" then...
     246/   10240 : 360                 	RP		; ...not a digit. Done.
     247/   10241 : 012                 	LDAX	B	; Refetch char and load into accumulator
     248/   10242 : 326 060             	SUI	30h	; If ASCII value < "0"...
     249/   10244 : 370                 	RM		; ...not a digit. Done.
     250/   10245 :                     
     251/   10245 : 137                 	MOV	E,A	; Save "ones' position" integer digit in E
     252/   10246 : 076 011             	MVI	A,09h	; counter for decimal magnitude shift
     253/   10250 : 305                 	PUSH	B
     254/   10251 : 104                 	MOV	B,H
     255/   10252 : 115                 	MOV	C,L
     256/   10253 : 011                 SHFTL:	DAD	B	; Add subtotal to subtotal
     257/   10254 : 075                 	DCR	A	; If loop counter > 0
     258/   10255 : 302 253 020         	JNZ	SHFTL	; ...continue repetitive additon
     259/   10260 : 301                 	POP	B
     260/   10261 : 031                 	DAD	D	; Add in "ones' position" digit
     261/   10262 : 003                 	INX	B	; Point to next char
     262/   10263 : 303 235 020         	JMP	CHAR	; Lather, rinse, repeat
     263/   10266 :                     
     264/   10266 :                     ; Convert an integer to a NULL-terminated string
     265/   10266 :                     ;
     266/   10266 :                     ; Calling sequence:
     267/   10266 :                     ;
     268/   10266 :                     ;       LHLD    integer    ; 16-bit integer        into LH
     269/   10266 :                     ;	LXI	B,buffer   ; 16-bit memory address into BC
     270/   10266 :                     ;	CALL	STR
     271/   10266 :                     ;
     272/   10266 :                     ; where:
     273/   10266 :                     ;       integer is the address of the integer to be converted to ASCII
     274/   10266 :                     ;	buffer  is the address of a byte array for storing ASCII representation
     275/   10266 :                     ;
     276/   10266 :                     
     277/   10266 : 305                 STR:	PUSH	B
     278/   10267 : 345                 	PUSH	H	; Save initial value in HL for later use
     279/   10270 :                     
     280/   10270 :                     ;	STAX	B	; ...store byte in buffer
     281/   10270 :                     ;	INX	B	; ...point to next empty byte
     282/   10270 : 341                 	POP	H
     283/   10271 : 301                 	POP	B
     284/   10272 : 311                 	RET		; Return
     285/   10273 :                     
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 7 - 12/04/2020 09:35:07 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHAR :                       10235 C |
*CONSTPI :        3.141592653589793 - |  CR :                            15 - |
 CRLF :                       10110 C | *DATE :                "12/04/2020" - |
*DIVI :                       10151 C |  DV0 :                        10166 C |
 DV1 :                        10174 C | *ESC :                           33 - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETC :                       10040 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*INT :                        10230 C |  LF :                            12 - |
 LFCR :                       10100 C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MOMCPU :                    100200 - |
*MOMCPUNAME :                "8080" - |  MRST :                           3 - |
 MULT0 :                      10126 C |  MULT1 :                      10142 C |
 MULT2 :                      10147 C | *MULTI :                      10121 C |
*NESTMAX :                      400 - |  NUL :                            0 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PUTC :                       10011 C |  RCVD :                           1 - |
 READ :                       10056 C | *RELAXED :                        0 - |
*RSTIO :                      10000 C |  SENT :                           2 - |
 SHFTL :                      10253 C |  SIO1D :                         21 - |
 SIO1S :                         20 - | *STR :                        10266 C |
 TERM :                       10115 C | *TIME :               "09:35:07 PM" - |
*TRUE :                           1 - | *VERSION :                    12057 - |
 WAITI :                      10041 C |  WAITO :                      10012 C |
 WRITE :                      10025 C | *Z80SYNTAX :                      0 - |

     59 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 8 - 12/04/2020 09:35:07 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.00 seconds assembly time

    285 lines source file
      2 passes
      0 errors
      0 warnings
