 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 1 - 12/04/2020 09:35:07 PM


 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 2 - 12/04/2020 09:35:07 PM


       1/       0 :                     	NEWPAGE	0
       2/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3/       0 :                     ;
       4/       0 :                     ; NAME:    stdlib.inc
       5/       0 :                     ; EDITOR:  Kevin Cole ("The Ubuntourist") <kevin.cole@novawebdevelopment.org>
       6/       0 :                     ; LASTMOD: 2020.11.03 (kjc)
       7/       0 :                     ;
       8/       0 :                     ; DESCRIPTION: 
       9/       0 :                     ;
      10/       0 :                     ;     A rudimentary "include" for standard input / output, math,
      11/       0 :                     ;     and conversion functions
      12/       0 :                     ;
      13/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      14/       0 :                     
      15/       0 :                     ;;;;;;;;;;;;;
      16/       0 :                     ; Constants ;
      17/       0 :                     ;;;;;;;;;;;;;
      18/       0 :                     
      19/       0 :                     ; ASCII characters
      20/       0 :                     
      21/       0 : =0DH                CR:	EQU	0Dh	; ASCII CR  (Carriage Return, a.k.a. Ctrl-M)
      22/       0 : =0AH                LF:	EQU	0Ah	; ASCII LF  (Line Feed        a.k.a. Ctrl-J)
      23/       0 : =1BH                ESC:	EQU	1Bh	; ASCII ESC (Escape,          a.k.a. Ctrl-[)
      24/       0 : =0H                 NUL:	EQU	00h	; ASCII NUL (Null)
      25/       0 :                     
      26/       0 :                     ; I/O
      27/       0 :                     
      28/       0 : =10H                SIO1S:	EQU	10h	; Serial I/O communications port 1 STATUS
      29/       0 : =11H                SIO1D:	EQU	11h	; Serial I/O communications port 1 DATA
      30/       0 :                     
      31/       0 : =3H                 MRST:	EQU	03h	; UART Master Reset
      32/       0 : =1H                 RCVD:	EQU	01h	; Character received
      33/       0 : =2H                 SENT:	EQU	002h	; Data sent. Output complete
      34/       0 :                     
      35/       0 :                     ; Code segment
      36/       0 :                     
      37/    1000 :                     	ORG	1000h	; Load at memory location 1000 (hex)
      38/    1000 :                     
      39/    1000 :                     ; Reset serial input / output
      40/    1000 :                     ;
      41/    1000 : 3E 03               RSTIO:	MVI	A,MRST
      42/    1002 : D3 10               	OUT	SIO1S	; Reset the UART
      43/    1004 : 3E 15               	MVI	A,15h	; Settings: No RI, No XI, RTS Low, 8N1, /16
      44/    1006 : D3 10               	OUT	SIO1S	; Configure the UART with above settings
      45/    1008 : C9                  	RET		; Return
      46/    1009 :                     
      47/    1009 :                     ; Put a character on to the serial I/O bus (stdout)
      48/    1009 :                     ;
      49/    1009 :                     ; Calling sequence:
      50/    1009 :                     ;
      51/    1009 :                     ;	LDAX	register
      52/    1009 :                     ;	CALL	PUTC
      53/    1009 :                     ;
      54/    1009 :                     ; where:
      55/    1009 :                     ;	register contains the ASCII value to be sent
      56/    1009 :                     ;
      57/    1009 :                     
      58/    1009 : F5                  PUTC:	PUSH	PSW	; Preserve Program Status Word
      59/    100A : DB 10               WAITO:	IN	SIO1S	; Check serial I/O status bit 1 (XMIT status)
      60/    100C : E6 02               	ANI	SENT	; If data not sent (i.e. XMIT not finished)...
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 3 - 12/04/2020 09:35:07 PM


      61/    100E : CA 0A 10            	JZ	WAITO	; ...spin wheels: continue checking status. Else...
      62/    1011 : F1                  	POP	PSW	; ...restore Program Status Word
      63/    1012 : D3 11               	OUT	SIO1D	; ...output byte
      64/    1014 : C9                  	RET		; ...return
      65/    1015 :                     
      66/    1015 :                     ; Write a null-terminated string out to the serial port (stdout)
      67/    1015 :                     ;
      68/    1015 :                     ; Calling sequence:
      69/    1015 :                     ;
      70/    1015 :                     ;	LXI	B,string
      71/    1015 :                     ;	CALL	WRITE
      72/    1015 :                     ;
      73/    1015 :                     ; where:
      74/    1015 :                     ;	string is the address of a null-terminated ASCII string
      75/    1015 :                     ;
      76/    1015 :                     
      77/    1015 : 0A                  WRITE:	LDAX	B	; Fetch byte
      78/    1016 : FE 00               	CPI	NUL	; If byte is ASCII NUL...
      79/    1018 : C8                  	RZ		; ...return. Else...
      80/    1019 : CD 09 10            	CALL	PUTC	; ...output byte
      81/    101C : 03                  	INX	B	; ...point to next byte
      82/    101D : C3 15 10            	JMP	WRITE	; ...lather, rinse, repeat: Fetch next byte.
      83/    1020 :                     
      84/    1020 :                     ; Get a character off of the serial I/O bus (stdin)
      85/    1020 :                     ;
      86/    1020 : F5                  GETC:	PUSH	PSW	; Preserve Program Status Word
      87/    1021 : DB 10               WAITI:	IN	SIO1S	; Check serial I/O status bit
      88/    1023 : E6 01               	ANI	RCVD	; If no data received...
      89/    1025 : CA 21 10            	JZ	WAITI	; ...spin wheels: continue checking status. Else...
      90/    1028 : F1                  	POP	PSW	; ...restore Program Status Word
      91/    1029 : DB 11               	IN	SIO1D	; ...read the character
      92/    102B : D3 11               	OUT	SIO1D	; ...echo it
      93/    102D : C9                  	RET		; ...return
      94/    102E :                     
      95/    102E :                     ; Read one line (CR- or LF-terminated string) from the serial port (stdin)
      96/    102E :                     ;
      97/    102E :                     ; Calling sequence:
      98/    102E :                     ;
      99/    102E :                     ;	LXI	B,buffer
     100/    102E :                     ;	CALL	READ
     101/    102E :                     ;
     102/    102E :                     ; where:
     103/    102E :                     ;	buffer is the address of a byte array for storing the string
     104/    102E :                     ;
     105/    102E :                     
     106/    102E : CD 20 10            READ:	CALL	GETC	; Fetch byte
     107/    1031 : FE 0D               	CPI	CR	; If byte is an ASCII CR (Carriage Return)...
     108/    1033 : CA 48 10            	JZ	CRLF	; ...add LF and return. Else...
     109/    1036 : FE 0A               	CPI	LF	; ...if byte is an ASCII LF (Line Feed)...
     110/    1038 : CA 40 10            	JZ	LFCR	; ...add CR and return. Else...
     111/    103B : 02                  	STAX	B	; ...store byte in buffer
     112/    103C : 03                  	INX	B	; ...point to next empty byte
     113/    103D : C3 2E 10            	JMP	READ	; ...lather, rinse, repeat: Fetch next byte.
     114/    1040 : 3E 0D               LFCR:	MVI	A,CR
     115/    1042 : CD 09 10            	CALL	PUTC	; Print a CR
     116/    1045 : C3 4D 10            	JMP	TERM	; Terminate the input string
     117/    1048 : 3E 0A               CRLF:	MVI	A,LF
     118/    104A : CD 09 10            	CALL	PUTC	; Print a LF
     119/    104D : 3E 00               TERM:	MVI	A,NUL	; Null terminator
     120/    104F : 02                  	STAX	B	; Terminate the input string
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 4 - 12/04/2020 09:35:07 PM


     121/    1050 : C9                  	RET		; Return
     122/    1051 :                     
     123/    1051 :                     ; Multiply multiplicand by multiplier
     124/    1051 :                     ;
     125/    1051 :                     ; Calling sequence:
     126/    1051 :                     ;
     127/    1051 :                     ;	LXI	C,multiplier
     128/    1051 :                     ;	LXI	D,multiplicand
     129/    1051 :                     ;	CALL	MULTI
     130/    1051 :                     ;
     131/    1051 :                     ; where:
     132/    1051 :                     ;	multiplier   is one of the two numbers to be multiplied
     133/    1051 :                     ;	multiplicand is the other number to be multiplied
     134/    1051 :                     ;
     135/    1051 :                     ; returns:
     136/    1051 :                     ;	product in register pair BC
     137/    1051 :                     
     138/    1051 : F5                  MULTI:	PUSH	PSW
     139/    1052 : 06 00               	MVI	B,0	; Initialize most significant byte of result
     140/    1054 : 1E 09               	MVI	E,9	; Bit counter
     141/    1056 : 79                  MULT0:	MOV	A,C	; Rotate least significant bit of...
     142/    1057 : 1F                  	RAR		; ...multiplier to carry and shift...
     143/    1058 : 4F                  	MOV	C,A	; ...low-order byte of result
     144/    1059 : 1D                  	DCR	E	; Countdown to zero (decrement bit counter)
     145/    105A : CA 67 10            	JZ	MULT2	; If zeroed, we're done
     146/    105D : 78                  	MOV	A,B
     147/    105E : D2 62 10            	JNC	MULT1	; If carry bit = 1...
     148/    1061 : 82                  	ADD	D	; ...add multiplicand to high-order byte
     149/    1062 : 1F                  MULT1:	RAR		; Else... shift high-order byte of result
     150/    1063 : 47                  	MOV	B,A
     151/    1064 : C3 56 10            	JMP	MULT0	; Lather, rinse, repeat
     152/    1067 : F1                  MULT2:	POP	PSW
     153/    1068 : C9                  	RET		; Return
     154/    1069 :                     
     155/    1069 :                     ; Divide dividend by divisor
     156/    1069 :                     ;
     157/    1069 :                     ; Calling sequence:
     158/    1069 :                     ;
     159/    1069 :                     ;	MVI	B,00h
     160/    1069 :                     ;	MVI	C,dividend
     161/    1069 :                     ;	MVI	D,00h
     162/    1069 :                     ;	MVI	E,divisor
     163/    1069 :                     
     164/    1069 :                     ;	CALL	DIVI
     165/    1069 :                     ;
     166/    1069 :                     ; where:
     167/    1069 :                     ;	dividend is the number to be divided
     168/    1069 :                     ;	divisor  is the number to divide by
     169/    1069 :                     ;
     170/    1069 :                     ; returns:
     171/    1069 :                     ;	quotient  in register pair BC
     172/    1069 :                     ;	remainder in register pair DE
     173/    1069 :                     
     174/    1069 : F5                  DIVI:	PUSH	PSW
     175/    106A : 7A                  	MOV	A,D	; Negate the divisor
     176/    106B : 2F                  	CMA		;    "    "     "
     177/    106C : 57                  	MOV	D,A	;    "    "     "
     178/    106D : 7B                  	MOV	A,E	;    "    "     "
     179/    106E : 2F                  	CMA		;    "    "     "
     180/    106F : 5F                  	MOV	E,A	;    "    "     "
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 5 - 12/04/2020 09:35:07 PM


     181/    1070 : 13                  	INX	D	; For two's complement
     182/    1071 : 21 00 00            	LXI	H,00h	; Initial value for remainder
     183/    1074 : 3E 11               	MVI	A,11h	; Initialize loop counter
     184/    1076 : E5                  DV0:	PUSH	H	; Save remainder
     185/    1077 : 19                  	DAD	D	; Subtract divisor (add negative)
     186/    1078 : D2 7C 10            	JNC	DV1	; Underflow. Restore register pair HL
     187/    107B : E3                  	XTHL
     188/    107C : E1                  DV1:	POP	H
     189/    107D : F5                  	PUSH	PSW	; Save loop counter
     190/    107E :                     
     191/    107E :                     	; 4 register left shift
     192/    107E :                     	; Carry->C->B->L->H
     193/    107E :                     
     194/    107E : 79                  	MOV	A,C
     195/    107F : 17                  	RAL
     196/    1080 : 4F                  	MOV	C,A
     197/    1081 :                     
     198/    1081 : 78                  	MOV	A,B
     199/    1082 : 17                  	RAL
     200/    1083 : 47                  	MOV	B,A
     201/    1084 :                     
     202/    1084 : 7D                  	MOV	A,L
     203/    1085 : 17                  	RAL
     204/    1086 : 6F                  	MOV	L,A
     205/    1087 :                     
     206/    1087 : 7C                  	MOV	A,H
     207/    1088 : 17                  	RAL
     208/    1089 : 67                  	MOV	H,A
     209/    108A :                     
     210/    108A : F1                  	POP	PSW	; Restore loop counter (A)
     211/    108B : 3D                  	DCR	A	; Decrement loop counter
     212/    108C : C2 76 10            	JNZ	DV0	; Lather, rinse, repeat
     213/    108F :                     
     214/    108F :                     	; Post-divide clean-up:
     215/    108F :                     	; Shift remainder right and return in DE
     216/    108F :                     
     217/    108F : B7                  	ORA	A
     218/    1090 :                     
     219/    1090 : 7C                  	MOV	A,H
     220/    1091 : 1F                  	RAR
     221/    1092 : 57                  	MOV	D,A	; Store shifted H in D
     222/    1093 :                     
     223/    1093 : 7D                  	MOV	A,L
     224/    1094 : 1F                  	RAR
     225/    1095 : 5F                  	MOV	E,A	; Store shifted L in E
     226/    1096 :                     
     227/    1096 : F1                  	POP	PSW
     228/    1097 : C9                  	RET
     229/    1098 :                     
     230/    1098 :                     ; Convert a NULL-terminated string to an integer
     231/    1098 :                     ;
     232/    1098 :                     ; Calling sequence:
     233/    1098 :                     ;
     234/    1098 :                     ;	LXI	B,string
     235/    1098 :                     ;	CALL	INT
     236/    1098 :                     ;
     237/    1098 :                     ; where:
     238/    1098 :                     ;	string is the address of a string of ASCII digits
     239/    1098 :                     ;
     240/    1098 :                     
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 6 - 12/04/2020 09:35:07 PM


     241/    1098 : 21 00 00            INT:	LXI	H,0000h	; Initialize subtotal
     242/    109B : 16 00               	MVI	D,00h
     243/    109D :                     
     244/    109D : 0A                  CHAR:	LDAX	B	; Fetch char and load into accumulator
     245/    109E : D6 39               	SUI	39h	; If ASCII value > "9" then...
     246/    10A0 : F0                  	RP		; ...not a digit. Done.
     247/    10A1 : 0A                  	LDAX	B	; Refetch char and load into accumulator
     248/    10A2 : D6 30               	SUI	30h	; If ASCII value < "0"...
     249/    10A4 : F8                  	RM		; ...not a digit. Done.
     250/    10A5 :                     
     251/    10A5 : 5F                  	MOV	E,A	; Save "ones' position" integer digit in E
     252/    10A6 : 3E 09               	MVI	A,09h	; counter for decimal magnitude shift
     253/    10A8 : C5                  	PUSH	B
     254/    10A9 : 44                  	MOV	B,H
     255/    10AA : 4D                  	MOV	C,L
     256/    10AB : 09                  SHFTL:	DAD	B	; Add subtotal to subtotal
     257/    10AC : 3D                  	DCR	A	; If loop counter > 0
     258/    10AD : C2 AB 10            	JNZ	SHFTL	; ...continue repetitive additon
     259/    10B0 : C1                  	POP	B
     260/    10B1 : 19                  	DAD	D	; Add in "ones' position" digit
     261/    10B2 : 03                  	INX	B	; Point to next char
     262/    10B3 : C3 9D 10            	JMP	CHAR	; Lather, rinse, repeat
     263/    10B6 :                     
     264/    10B6 :                     ; Convert an integer to a NULL-terminated string
     265/    10B6 :                     ;
     266/    10B6 :                     ; Calling sequence:
     267/    10B6 :                     ;
     268/    10B6 :                     ;       LHLD    integer    ; 16-bit integer        into LH
     269/    10B6 :                     ;	LXI	B,buffer   ; 16-bit memory address into BC
     270/    10B6 :                     ;	CALL	STR
     271/    10B6 :                     ;
     272/    10B6 :                     ; where:
     273/    10B6 :                     ;       integer is the address of the integer to be converted to ASCII
     274/    10B6 :                     ;	buffer  is the address of a byte array for storing ASCII representation
     275/    10B6 :                     ;
     276/    10B6 :                     
     277/    10B6 : C5                  STR:	PUSH	B
     278/    10B7 : E5                  	PUSH	H	; Save initial value in HL for later use
     279/    10B8 :                     
     280/    10B8 :                     ;	STAX	B	; ...store byte in buffer
     281/    10B8 :                     ;	INX	B	; ...point to next empty byte
     282/    10B8 : E1                  	POP	H
     283/    10B9 : C1                  	POP	B
     284/    10BA : C9                  	RET		; Return
     285/    10BB :                     
 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 7 - 12/04/2020 09:35:07 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHAR :                        109D C |
*CONSTPI :        3.141592653589793 - |  CR :                            0D - |
 CRLF :                        1048 C | *DATE :                "12/04/2020" - |
*DIVI :                        1069 C |  DV0 :                         1076 C |
 DV1 :                         107C C | *ESC :                           1B - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETC :                        1020 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*INT :                         1098 C |  LF :                            0A - |
 LFCR :                        1040 C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MOMCPU :                      8080 - |
*MOMCPUNAME :                "8080" - |  MRST :                           3 - |
 MULT0 :                       1056 C |  MULT1 :                       1062 C |
 MULT2 :                       1067 C | *MULTI :                       1051 C |
*NESTMAX :                      100 - |  NUL :                            0 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PUTC :                        1009 C |  RCVD :                           1 - |
 READ :                        102E C | *RELAXED :                        0 - |
*RSTIO :                       1000 C |  SENT :                           2 - |
 SHFTL :                       10AB C |  SIO1D :                         11 - |
 SIO1S :                         10 - | *STR :                         10B6 C |
 TERM :                        104D C | *TIME :               "09:35:07 PM" - |
*TRUE :                           1 - | *VERSION :                     142F - |
 WAITI :                       1021 C |  WAITO :                       100A C |
 WRITE :                       1015 C | *Z80SYNTAX :                      0 - |

     59 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 183] - Source File stdlib.asm - Page 8 - 12/04/2020 09:35:07 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.00 seconds assembly time

    285 lines source file
      2 passes
      0 errors
      0 warnings
