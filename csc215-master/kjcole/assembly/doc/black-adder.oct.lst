 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 1 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


       1/       0 :                     	PAGE	40		; 40 lines per page
       2/       0 :                     	TITLE	"Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)"
       3/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4/       0 :                     ;
       5/       0 :                     ; NAME:    black-adder.asm
       6/       0 :                     ; EDITOR:  Kevin Cole ("The Ubuntourist") <kevin.cole@novawebdevelopment.org>
       7/       0 :                     ; LASTMOD: 2020.11.03 (kjc)
       8/       0 :                     ;
       9/       0 :                     ; DESCRIPTION:
      10/       0 :                     ;
      11/       0 :                     ;     Increment a memory location each time a key is pressed.
      12/       0 :                     ;
      13/       0 :                     ;     To take full advantage of the included ANSI escape sequences,
      14/       0 :                     ;     start minicom with the `-c on` option:
      15/       0 :                     ;
      16/       0 :                     ;         $ minicom -c on altair
      17/       0 :                     ;
      18/       0 :                     ;     or include it in the MINICOM environment variable:
      19/       0 :                     ;
      20/       0 :                     ;         $ export MINICOM="-m -c on"
      21/       0 :                     ;         $ minicom altair
      22/       0 :                     ;
      23/       0 :                     ;     NOTES: For help with ANSI escape sequences see:
      24/       0 :                     ;
      25/       0 :                     ;                https://en.wikipedia.org/wiki/ANSI_escape_code
      26/       0 :                     ;
      27/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      28/       0 :                     
      29/       0 :                     ; Code segment
      30/       0 :                     
      31/       0 :                     	INCLUDE	stdlib	; Include standard library
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 2 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)    1/       0 :                     	NEWPAGE	0
(1)    2/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(1)    3/       0 :                     ;
(1)    4/       0 :                     ; NAME:    stdlib.inc
(1)    5/       0 :                     ; EDITOR:  Kevin Cole ("The Ubuntourist") <kevin.cole@novawebdevelopment.org>
(1)    6/       0 :                     ; LASTMOD: 2020.11.03 (kjc)
(1)    7/       0 :                     ;
(1)    8/       0 :                     ; DESCRIPTION: 
(1)    9/       0 :                     ;
(1)   10/       0 :                     ;     A rudimentary "include" for standard input / output, math,
(1)   11/       0 :                     ;     and conversion functions
(1)   12/       0 :                     ;
(1)   13/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;;;;;;;;;;;
(1)   16/       0 :                     ; Constants ;
(1)   17/       0 :                     ;;;;;;;;;;;;;
(1)   18/       0 :                     
(1)   19/       0 :                     ; ASCII characters
(1)   20/       0 :                     
(1)   21/       0 : =15O                CR:	EQU	0Dh	; ASCII CR  (Carriage Return, a.k.a. Ctrl-M)
(1)   22/       0 : =12O                LF:	EQU	0Ah	; ASCII LF  (Line Feed        a.k.a. Ctrl-J)
(1)   23/       0 : =33O                ESC:	EQU	1Bh	; ASCII ESC (Escape,          a.k.a. Ctrl-[)
(1)   24/       0 : =0O                 NUL:	EQU	00h	; ASCII NUL (Null)
(1)   25/       0 :                     
(1)   26/       0 :                     ; I/O
(1)   27/       0 :                     
(1)   28/       0 : =20O                SIO1S:	EQU	10h	; Serial I/O communications port 1 STATUS
(1)   29/       0 : =21O                SIO1D:	EQU	11h	; Serial I/O communications port 1 DATA
(1)   30/       0 :                     
(1)   31/       0 : =3O                 MRST:	EQU	03h	; UART Master Reset
(1)   32/       0 : =1O                 RCVD:	EQU	01h	; Character received
(1)   33/       0 : =2O                 SENT:	EQU	002h	; Data sent. Output complete
(1)   34/       0 :                     
(1)   35/       0 :                     ; Code segment
(1)   36/       0 :                     
(1)   37/   10000 :                     	ORG	1000h	; Load at memory location 1000 (hex)
(1)   38/   10000 :                     
(1)   39/   10000 :                     ; Reset serial input / output
(1)   40/   10000 :                     ;
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 3 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)   41/   10000 : 076 003             RSTIO:	MVI	A,MRST
(1)   42/   10002 : 323 020             	OUT	SIO1S	; Reset the UART
(1)   43/   10004 : 076 025             	MVI	A,15h	; Settings: No RI, No XI, RTS Low, 8N1, /16
(1)   44/   10006 : 323 020             	OUT	SIO1S	; Configure the UART with above settings
(1)   45/   10010 : 311                 	RET		; Return
(1)   46/   10011 :                     
(1)   47/   10011 :                     ; Put a character on to the serial I/O bus (stdout)
(1)   48/   10011 :                     ;
(1)   49/   10011 :                     ; Calling sequence:
(1)   50/   10011 :                     ;
(1)   51/   10011 :                     ;	LDAX	register
(1)   52/   10011 :                     ;	CALL	PUTC
(1)   53/   10011 :                     ;
(1)   54/   10011 :                     ; where:
(1)   55/   10011 :                     ;	register contains the ASCII value to be sent
(1)   56/   10011 :                     ;
(1)   57/   10011 :                     
(1)   58/   10011 : 365                 PUTC:	PUSH	PSW	; Preserve Program Status Word
(1)   59/   10012 : 333 020             WAITO:	IN	SIO1S	; Check serial I/O status bit 1 (XMIT status)
(1)   60/   10014 : 346 002             	ANI	SENT	; If data not sent (i.e. XMIT not finished)...
(1)   61/   10016 : 312 012 020         	JZ	WAITO	; ...spin wheels: continue checking status. Else...
(1)   62/   10021 : 361                 	POP	PSW	; ...restore Program Status Word
(1)   63/   10022 : 323 021             	OUT	SIO1D	; ...output byte
(1)   64/   10024 : 311                 	RET		; ...return
(1)   65/   10025 :                     
(1)   66/   10025 :                     ; Write a null-terminated string out to the serial port (stdout)
(1)   67/   10025 :                     ;
(1)   68/   10025 :                     ; Calling sequence:
(1)   69/   10025 :                     ;
(1)   70/   10025 :                     ;	LXI	B,string
(1)   71/   10025 :                     ;	CALL	WRITE
(1)   72/   10025 :                     ;
(1)   73/   10025 :                     ; where:
(1)   74/   10025 :                     ;	string is the address of a null-terminated ASCII string
(1)   75/   10025 :                     ;
(1)   76/   10025 :                     
(1)   77/   10025 : 012                 WRITE:	LDAX	B	; Fetch byte
(1)   78/   10026 : 376 000             	CPI	NUL	; If byte is ASCII NUL...
(1)   79/   10030 : 310                 	RZ		; ...return. Else...
(1)   80/   10031 : 315 011 020         	CALL	PUTC	; ...output byte
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 4 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)   81/   10034 : 003                 	INX	B	; ...point to next byte
(1)   82/   10035 : 303 025 020         	JMP	WRITE	; ...lather, rinse, repeat: Fetch next byte.
(1)   83/   10040 :                     
(1)   84/   10040 :                     ; Get a character off of the serial I/O bus (stdin)
(1)   85/   10040 :                     ;
(1)   86/   10040 : 365                 GETC:	PUSH	PSW	; Preserve Program Status Word
(1)   87/   10041 : 333 020             WAITI:	IN	SIO1S	; Check serial I/O status bit
(1)   88/   10043 : 346 001             	ANI	RCVD	; If no data received...
(1)   89/   10045 : 312 041 020         	JZ	WAITI	; ...spin wheels: continue checking status. Else...
(1)   90/   10050 : 361                 	POP	PSW	; ...restore Program Status Word
(1)   91/   10051 : 333 021             	IN	SIO1D	; ...read the character
(1)   92/   10053 : 323 021             	OUT	SIO1D	; ...echo it
(1)   93/   10055 : 311                 	RET		; ...return
(1)   94/   10056 :                     
(1)   95/   10056 :                     ; Read one line (CR- or LF-terminated string) from the serial port (stdin)
(1)   96/   10056 :                     ;
(1)   97/   10056 :                     ; Calling sequence:
(1)   98/   10056 :                     ;
(1)   99/   10056 :                     ;	LXI	B,buffer
(1)  100/   10056 :                     ;	CALL	READ
(1)  101/   10056 :                     ;
(1)  102/   10056 :                     ; where:
(1)  103/   10056 :                     ;	buffer is the address of a byte array for storing the string
(1)  104/   10056 :                     ;
(1)  105/   10056 :                     
(1)  106/   10056 : 315 040 020         READ:	CALL	GETC	; Fetch byte
(1)  107/   10061 : 376 015             	CPI	CR	; If byte is an ASCII CR (Carriage Return)...
(1)  108/   10063 : 312 110 020         	JZ	CRLF	; ...add LF and return. Else...
(1)  109/   10066 : 376 012             	CPI	LF	; ...if byte is an ASCII LF (Line Feed)...
(1)  110/   10070 : 312 100 020         	JZ	LFCR	; ...add CR and return. Else...
(1)  111/   10073 : 002                 	STAX	B	; ...store byte in buffer
(1)  112/   10074 : 003                 	INX	B	; ...point to next empty byte
(1)  113/   10075 : 303 056 020         	JMP	READ	; ...lather, rinse, repeat: Fetch next byte.
(1)  114/   10100 : 076 015             LFCR:	MVI	A,CR
(1)  115/   10102 : 315 011 020         	CALL	PUTC	; Print a CR
(1)  116/   10105 : 303 115 020         	JMP	TERM	; Terminate the input string
(1)  117/   10110 : 076 012             CRLF:	MVI	A,LF
(1)  118/   10112 : 315 011 020         	CALL	PUTC	; Print a LF
(1)  119/   10115 : 076 000             TERM:	MVI	A,NUL	; Null terminator
(1)  120/   10117 : 002                 	STAX	B	; Terminate the input string
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 5 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)  121/   10120 : 311                 	RET		; Return
(1)  122/   10121 :                     
(1)  123/   10121 :                     ; Multiply multiplicand by multiplier
(1)  124/   10121 :                     ;
(1)  125/   10121 :                     ; Calling sequence:
(1)  126/   10121 :                     ;
(1)  127/   10121 :                     ;	LXI	C,multiplier
(1)  128/   10121 :                     ;	LXI	D,multiplicand
(1)  129/   10121 :                     ;	CALL	MULTI
(1)  130/   10121 :                     ;
(1)  131/   10121 :                     ; where:
(1)  132/   10121 :                     ;	multiplier   is one of the two numbers to be multiplied
(1)  133/   10121 :                     ;	multiplicand is the other number to be multiplied
(1)  134/   10121 :                     ;
(1)  135/   10121 :                     ; returns:
(1)  136/   10121 :                     ;	product in register pair BC
(1)  137/   10121 :                     
(1)  138/   10121 : 365                 MULTI:	PUSH	PSW
(1)  139/   10122 : 006 000             	MVI	B,0	; Initialize most significant byte of result
(1)  140/   10124 : 036 011             	MVI	E,9	; Bit counter
(1)  141/   10126 : 171                 MULT0:	MOV	A,C	; Rotate least significant bit of...
(1)  142/   10127 : 037                 	RAR		; ...multiplier to carry and shift...
(1)  143/   10130 : 117                 	MOV	C,A	; ...low-order byte of result
(1)  144/   10131 : 035                 	DCR	E	; Countdown to zero (decrement bit counter)
(1)  145/   10132 : 312 147 020         	JZ	MULT2	; If zeroed, we're done
(1)  146/   10135 : 170                 	MOV	A,B
(1)  147/   10136 : 322 142 020         	JNC	MULT1	; If carry bit = 1...
(1)  148/   10141 : 202                 	ADD	D	; ...add multiplicand to high-order byte
(1)  149/   10142 : 037                 MULT1:	RAR		; Else... shift high-order byte of result
(1)  150/   10143 : 107                 	MOV	B,A
(1)  151/   10144 : 303 126 020         	JMP	MULT0	; Lather, rinse, repeat
(1)  152/   10147 : 361                 MULT2:	POP	PSW
(1)  153/   10150 : 311                 	RET		; Return
(1)  154/   10151 :                     
(1)  155/   10151 :                     ; Divide dividend by divisor
(1)  156/   10151 :                     ;
(1)  157/   10151 :                     ; Calling sequence:
(1)  158/   10151 :                     ;
(1)  159/   10151 :                     ;	MVI	B,00h
(1)  160/   10151 :                     ;	MVI	C,dividend
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 6 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)  161/   10151 :                     ;	MVI	D,00h
(1)  162/   10151 :                     ;	MVI	E,divisor
(1)  163/   10151 :                     
(1)  164/   10151 :                     ;	CALL	DIVI
(1)  165/   10151 :                     ;
(1)  166/   10151 :                     ; where:
(1)  167/   10151 :                     ;	dividend is the number to be divided
(1)  168/   10151 :                     ;	divisor  is the number to divide by
(1)  169/   10151 :                     ;
(1)  170/   10151 :                     ; returns:
(1)  171/   10151 :                     ;	quotient  in register pair BC
(1)  172/   10151 :                     ;	remainder in register pair DE
(1)  173/   10151 :                     
(1)  174/   10151 : 365                 DIVI:	PUSH	PSW
(1)  175/   10152 : 172                 	MOV	A,D	; Negate the divisor
(1)  176/   10153 : 057                 	CMA		;    "    "     "
(1)  177/   10154 : 127                 	MOV	D,A	;    "    "     "
(1)  178/   10155 : 173                 	MOV	A,E	;    "    "     "
(1)  179/   10156 : 057                 	CMA		;    "    "     "
(1)  180/   10157 : 137                 	MOV	E,A	;    "    "     "
(1)  181/   10160 : 023                 	INX	D	; For two's complement
(1)  182/   10161 : 041 000 000         	LXI	H,00h	; Initial value for remainder
(1)  183/   10164 : 076 021             	MVI	A,11h	; Initialize loop counter
(1)  184/   10166 : 345                 DV0:	PUSH	H	; Save remainder
(1)  185/   10167 : 031                 	DAD	D	; Subtract divisor (add negative)
(1)  186/   10170 : 322 174 020         	JNC	DV1	; Underflow. Restore register pair HL
(1)  187/   10173 : 343                 	XTHL
(1)  188/   10174 : 341                 DV1:	POP	H
(1)  189/   10175 : 365                 	PUSH	PSW	; Save loop counter
(1)  190/   10176 :                     
(1)  191/   10176 :                     	; 4 register left shift
(1)  192/   10176 :                     	; Carry->C->B->L->H
(1)  193/   10176 :                     
(1)  194/   10176 : 171                 	MOV	A,C
(1)  195/   10177 : 027                 	RAL
(1)  196/   10200 : 117                 	MOV	C,A
(1)  197/   10201 :                     
(1)  198/   10201 : 170                 	MOV	A,B
(1)  199/   10202 : 027                 	RAL
(1)  200/   10203 : 107                 	MOV	B,A
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 7 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)  201/   10204 :                     
(1)  202/   10204 : 175                 	MOV	A,L
(1)  203/   10205 : 027                 	RAL
(1)  204/   10206 : 157                 	MOV	L,A
(1)  205/   10207 :                     
(1)  206/   10207 : 174                 	MOV	A,H
(1)  207/   10210 : 027                 	RAL
(1)  208/   10211 : 147                 	MOV	H,A
(1)  209/   10212 :                     
(1)  210/   10212 : 361                 	POP	PSW	; Restore loop counter (A)
(1)  211/   10213 : 075                 	DCR	A	; Decrement loop counter
(1)  212/   10214 : 302 166 020         	JNZ	DV0	; Lather, rinse, repeat
(1)  213/   10217 :                     
(1)  214/   10217 :                     	; Post-divide clean-up:
(1)  215/   10217 :                     	; Shift remainder right and return in DE
(1)  216/   10217 :                     
(1)  217/   10217 : 267                 	ORA	A
(1)  218/   10220 :                     
(1)  219/   10220 : 174                 	MOV	A,H
(1)  220/   10221 : 037                 	RAR
(1)  221/   10222 : 127                 	MOV	D,A	; Store shifted H in D
(1)  222/   10223 :                     
(1)  223/   10223 : 175                 	MOV	A,L
(1)  224/   10224 : 037                 	RAR
(1)  225/   10225 : 137                 	MOV	E,A	; Store shifted L in E
(1)  226/   10226 :                     
(1)  227/   10226 : 361                 	POP	PSW
(1)  228/   10227 : 311                 	RET
(1)  229/   10230 :                     
(1)  230/   10230 :                     ; Convert a NULL-terminated string to an integer
(1)  231/   10230 :                     ;
(1)  232/   10230 :                     ; Calling sequence:
(1)  233/   10230 :                     ;
(1)  234/   10230 :                     ;	LXI	B,string
(1)  235/   10230 :                     ;	CALL	INT
(1)  236/   10230 :                     ;
(1)  237/   10230 :                     ; where:
(1)  238/   10230 :                     ;	string is the address of a string of ASCII digits
(1)  239/   10230 :                     ;
(1)  240/   10230 :                     
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 8 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)  241/   10230 : 041 000 000         INT:	LXI	H,0000h	; Initialize subtotal
(1)  242/   10233 : 026 000             	MVI	D,00h
(1)  243/   10235 :                     
(1)  244/   10235 : 012                 CHAR:	LDAX	B	; Fetch char and load into accumulator
(1)  245/   10236 : 326 071             	SUI	39h	; If ASCII value > "9" then...
(1)  246/   10240 : 360                 	RP		; ...not a digit. Done.
(1)  247/   10241 : 012                 	LDAX	B	; Refetch char and load into accumulator
(1)  248/   10242 : 326 060             	SUI	30h	; If ASCII value < "0"...
(1)  249/   10244 : 370                 	RM		; ...not a digit. Done.
(1)  250/   10245 :                     
(1)  251/   10245 : 137                 	MOV	E,A	; Save "ones' position" integer digit in E
(1)  252/   10246 : 076 011             	MVI	A,09h	; counter for decimal magnitude shift
(1)  253/   10250 : 305                 	PUSH	B
(1)  254/   10251 : 104                 	MOV	B,H
(1)  255/   10252 : 115                 	MOV	C,L
(1)  256/   10253 : 011                 SHFTL:	DAD	B	; Add subtotal to subtotal
(1)  257/   10254 : 075                 	DCR	A	; If loop counter > 0
(1)  258/   10255 : 302 253 020         	JNZ	SHFTL	; ...continue repetitive additon
(1)  259/   10260 : 301                 	POP	B
(1)  260/   10261 : 031                 	DAD	D	; Add in "ones' position" digit
(1)  261/   10262 : 003                 	INX	B	; Point to next char
(1)  262/   10263 : 303 235 020         	JMP	CHAR	; Lather, rinse, repeat
(1)  263/   10266 :                     
(1)  264/   10266 :                     ; Convert an integer to a NULL-terminated string
(1)  265/   10266 :                     ;
(1)  266/   10266 :                     ; Calling sequence:
(1)  267/   10266 :                     ;
(1)  268/   10266 :                     ;       LHLD    integer    ; 16-bit integer        into LH
(1)  269/   10266 :                     ;	LXI	B,buffer   ; 16-bit memory address into BC
(1)  270/   10266 :                     ;	CALL	STR
(1)  271/   10266 :                     ;
(1)  272/   10266 :                     ; where:
(1)  273/   10266 :                     ;       integer is the address of the integer to be converted to ASCII
(1)  274/   10266 :                     ;	buffer  is the address of a byte array for storing ASCII representation
(1)  275/   10266 :                     ;
(1)  276/   10266 :                     
(1)  277/   10266 : 305                 STR:	PUSH	B
(1)  278/   10267 : 345                 	PUSH	H	; Save initial value in HL for later use
(1)  279/   10270 :                     
(1)  280/   10270 :                     ;	STAX	B	; ...store byte in buffer
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm(stdlib.inc) - Page 9 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


(1)  281/   10270 :                     ;	INX	B	; ...point to next empty byte
(1)  282/   10270 : 341                 	POP	H
(1)  283/   10271 : 301                 	POP	B
(1)  284/   10272 : 311                 	RET		; Return
(1)  285/   10273 :                     
      32/   10273 :                     
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 10 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


      33/   10273 :                     	NEWPAGE	0
      34/   10273 :                     
      35/       0 :                     	ORG	000h	; Load at memory location 000 (hex)
      36/       0 :                     
      37/       0 : 315 000 020         	CALL	RSTIO	; Initialize serialize input / output device
      38/       3 :                     
      39/       3 : 001 004 050         	LXI	B,WORDS	; Point to instructions (WORDS)
      40/       6 : 315 025 020         	CALL	WRITE	; Write WORDS to stdout (terminal)
      41/      11 :                     
      42/      11 : 001 312 050         	LXI	B,ASK1	; Point to first prompt (ASK1)
      43/      14 : 315 025 020         	CALL	WRITE	; Write ASK1 to stdout (terminal)
      44/      17 :                     
      45/      17 : 001 004 040         	LXI	B,BUFFR	; Point to input buffer (BUFFR)
      46/      22 : 315 056 020         	CALL	READ	; Read a line from stdin to BUFFR
      47/      25 :                     
      48/      25 : 001 316 050         	LXI	B,ASK2	; Point to first prompt (ASK2)
      49/      30 : 315 025 020         	CALL	WRITE	; Write ASK2 to stdout (terminal)
      50/      33 :                     
      51/      33 : 001 004 040         	LXI	B,BUFFR	; Point to input buffer (BUFFR)
      52/      36 : 315 056 020         	CALL	READ	; Read a line from stdin to BUFFR
      53/      41 :                     
      54/      41 : 166                 	HLT		; DEBUG
      55/      42 :                     
      56/      42 : 041 000 040         	LXI	H,WATCH	; Set location to increment
      57/      45 :                     
      58/      45 : 333 020             COUNT:	IN	SIO1S	; Check serial I/O status bit
      59/      47 : 346 001             	ANI	RCVD	; If no data received...
      60/      51 : 312 045 000         	JZ	COUNT	; ...spin wheels: continue checking status. Else...
      61/      54 : 333 021             	IN	SIO1D	; ...read the character
      62/      56 : 323 021             	OUT	SIO1D	; ...echo it
      63/      60 : 064                 	INR	M	; ...increment the watched counter
      64/      61 : 303 045 000         	JMP	COUNT	; ...wait for next character
      65/      64 :                     	
      66/      64 :                     ; Data segment
      67/      64 :                     
      68/   20000 :                     	ORG	2000h	; Load at memory locaton 8192 (decimal)
      69/   20000 :                     
      70/   20000 : 000                 WATCH:	DB	000h	; Initialize to zero
      71/   20001 : 000                 VAL1:	DB	000h	; Data Byte at address 2000 (hex) = 0
      72/   20002 : 000                 VAL2:	DB	000h	; Data Byte at address 2001 (hex) = 0
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 11 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


      73/   20003 : 000                 SUM:	DB	000h	; Data Byte at address 2002 (hex) = 0
      74/   20004 :                     
      75/   20004 :                     BUFFR:	DS	800h	; ~ one 80x25 screens-worth of bytes at 2003 (hex)
      76/   24004 :                     
      77/   24004 : 033 133 062 112     WORDS:	DB	ESC,"[2J"
      78/   24010 : 015 012             	DB	CR,LF
      79/   24012 : 015 012 040 040     	DB	CR,LF,"            "
            24016 : 040 040 040 040 
            24022 : 040 040 040 040 
            24026 : 040 040         
      80/   24030 : 040 040 040 040     	DB	"                ",ESC,"[31m","BLACK ADDER",ESC,"[0m",CR,LF
            24034 : 040 040 040 040 
            24040 : 040 040 040 040 
            24044 : 040 040 040 040 
            24050 : 033 133 063 061 
            24054 : 155 102 114 101 
            24060 : 103 113 040 101 
            24064 : 104 104 105 122 
            24070 : 033 133 060 155 
            24074 : 015 012         
      81/   24076 : 015 012 040 040     	DB	CR,LF,"            "
            24102 : 040 040 040 040 
            24106 : 040 040 040 040 
            24112 : 040 040         
      82/   24114 : 124 150 151 163     	DB	"This program adds two numbers in the range"
            24120 : 040 160 162 157 
            24124 : 147 162 141 155 
            24130 : 040 141 144 144 
            24134 : 163 040 164 167 
            24140 : 157 040 156 165 
            24144 : 155 142 145 162 
            24150 : 163 040 151 156 
            24154 : 040 164 150 145 
            24160 : 040 162 141 156 
            24164 : 147 145         
      83/   24166 : 015 012 040 040     	DB	CR,LF,"            "
            24172 : 040 040 040 040 
            24176 : 040 040 040 040 
            24202 : 040 040         
      84/   24204 : 055 061 062 067     	DB	"-127 to +127. Enter values X and Y at the"
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 12 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


            24210 : 040 164 157 040 
            24214 : 053 061 062 067 
            24220 : 056 040 105 156 
            24224 : 164 145 162 040 
            24230 : 166 141 154 165 
            24234 : 145 163 040 130 
            24240 : 040 141 156 144 
            24244 : 040 131 040 141 
            24250 : 164 040 164 150 
            24254 : 145             
      85/   24255 : 015 012 040 040     	DB	CR,LF,"            "
            24261 : 040 040 040 040 
            24265 : 040 040 040 040 
            24271 : 040 040         
      86/   24273 : 160 162 157 155     	DB	"prompts.",CR,LF
            24277 : 160 164 163 056 
            24303 : 015 012         
      87/   24305 : 015 012             	DB	CR,LF
      88/   24307 : 015 012             	DB	CR,LF
      89/   24311 : 000                 	DB	NUL	; NULL string terminator
      90/   24312 :                     
      91/   24312 : 130 072 040 000     ASK1:	DB	"X: ",NUL
      92/   24316 :                     
      93/   24316 : 131 072 040 000     ASK2:	DB	"Y: ",NUL
      94/   24322 :                     
      95/   24322 :                     	END		; End
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 13 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ASK1 :                       24312 C |  ASK2 :                       24316 C |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
 BUFFR :                      20004 C | *CASESENSITIVE :                  0 - |
 CHAR :                       10235 C | *CONSTPI :        3.141592653589793 - |
 COUNT :                         45 C |  CR :                            15 - |
 CRLF :                       10110 C | *DATE :                "12/04/2020" - |
*DIVI :                       10151 C |  DV0 :                        10166 C |
 DV1 :                        10174 C |  ESC :                           33 - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETC :                       10040 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*INT :                        10230 C |  LF :                            12 - |
 LFCR :                       10100 C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MOMCPU :                    100200 - |
*MOMCPUNAME :                "8080" - |  MRST :                           3 - |
 MULT0 :                      10126 C |  MULT1 :                      10142 C |
 MULT2 :                      10147 C | *MULTI :                      10121 C |
*NESTMAX :                      400 - |  NUL :                            0 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PUTC :                       10011 C |  RCVD :                           1 - |
 READ :                       10056 C | *RELAXED :                        0 - |
 RSTIO :                      10000 C |  SENT :                           2 - |
 SHFTL :                      10253 C |  SIO1D :                         21 - |
 SIO1S :                         20 - | *STR :                        10266 C |
*SUM :                        20003 C |  TERM :                       10115 C |
*TIME :               "09:31:32 PM" - | *TRUE :                           1 - |
*VAL1 :                       20001 C | *VAL2 :                       20002 C |
*VERSION :                    12057 - |  WAITI :                      10041 C |
 WAITO :                      10012 C |  WATCH :                      20000 C |
 WORDS :                      24004 C |  WRITE :                      10025 C |
*Z80SYNTAX :                      0 - |

     68 symbols
 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 14 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


     36 unused symbols

 AS V1.42 Beta [Bld 183] - Source File black-adder.asm - Page 15 - 12/04/2020 09:31:32 PM
Black Adder - Copyright (C) Kevin Cole 2020.11.04 (GPL)


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.01 seconds assembly time

    391 lines source file
      2 passes
      0 errors
      0 warnings
