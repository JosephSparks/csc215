 AS V1.42 Beta [Bld 183] - Source File hello-8800.asm - Page 1 - 12/04/2020 09:35:07 PM


       1/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2/       0 :                     ;
       3/       0 :                     ; NAME:    hello-8800.asm
       4/       0 :                     ; EDITOR:  Kevin Cole ("The Ubuntourist") <kevin.cole@novawebdevelopment.org>
       5/       0 :                     ; LASTMOD: 2020.10.06 (kjc)
       6/       0 :                     ;
       7/       0 :                     ; DESCRIPTION:
       8/       0 :                     ;
       9/       0 :                     ;     "Hello world!" suitable for the Macroassembler AS found at:
      10/       0 :                     ;
      11/       0 :                     ;         http://john.ccac.rwth-aachen.de:8000/as/
      12/       0 :                     ;
      13/       0 :                     ;     Assemble this source file with the command:
      14/       0 :                     ;
      15/       0 :                     ;         asl -a -cpu 8080 -L -listradix 8 hello-8800.asm
      16/       0 :                     ;
      17/       0 :                     ;     to generate a list file (hello-8800.lst) that displays the machine
      18/       0 :                     ;     op codes as octal values.
      19/       0 :                     ;
      20/       0 :                     ;     However, if you have installed "most" -- you know you want it --
      21/       0 :                     ;     it is VERY instructive to instead assemble the source file with
      22/       0 :                     ;     the command:
      23/       0 :                     ;
      24/       0 :                     ;         asl -a -cpu 8080 -L -listradix 16 hello-8800.asm
      25/       0 :                     ;
      26/       0 :                     ;     This produces the same binary file (hello-8800.p) but changes the
      27/       0 :                     ;     format of the list file, displaying the machine op codes in
      28/       0 :                     ;     hexadecimal, rather than octal, and, together with the command:
      29/       0 :                     ;
      30/       0 :                     ;         most hello-8800.p
      31/       0 :                     ;
      32/       0 :                     ;      you can study the actual binary "executable" produced, and
      33/       0 :                     ;      "debug" it by finding the machine op codes (in hex) embedded
      34/       0 :                     ;      in the executable (by comparing it to hello-8800.lst).
      35/       0 :                     ;
      36/       0 :                     ;      NOTE: The code this was built from originally used:
      37/       0 :                     ;
      38/       0 :                     ;          RRC
      39/       0 :                     ;          JNC     LOOP
      40/       0 :                     ;
      41/       0 :                     ;      in place of:
      42/       0 :                     ;
      43/       0 :                     ;          ANI     RCVD    ; If no data received... (bit is unset)
      44/       0 :                     ;          JZ      LOOP    ; ...spin wheels: continue checking status.
      45/       0 :                     ;
      46/       0 :                     ;      The original is faster and smaller: RRC requires only one
      47/       0 :                     ;      machine cycle, and a single byte, whereas ANI requires two
      48/       0 :                     ;      cycles and two bytes.
      49/       0 :                     ;
      50/       0 :                     ;      However, the first form is less intuitive: Instead of
      51/       0 :                     ;      checking the low-order bit of the accumulator and looping when
      52/       0 :                     ;      it is zero, the original code rotated the value in the
      53/       0 :                     ;      accumulator to the right, wrapping bit 0 into the high-order
      54/       0 :                     ;      bit, and setting the carry status flag to the value of the
      55/       0 :                     ;      pre-rotated low-order bit. It then jumps if no carry took
      56/       0 :                     ;      place, i.e. the carry flag bit remains unset (0).
      57/       0 :                     ;
      58/       0 :                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      59/       0 :                     
      60/       0 : =20O                SIO1S:	EQU	10h		; Serial I/O communications port 1 STATUS
 AS V1.42 Beta [Bld 183] - Source File hello-8800.asm - Page 2 - 12/04/2020 09:35:07 PM


      61/       0 : =21O                SIO1D:	EQU	11h		; Serial I/O communications port 1 DATA
      62/       0 :                     
      63/       0 : =3O                 MRST:	EQU	03h		; UART Master Reset
      64/       0 : =1O                 RCVD:	EQU	01h		; Character received
      65/       0 :                     
      66/       0 :                     ; Code segment
      67/       0 :                     
      68/       0 :                     	ORG	000h
      69/       0 :                     
      70/       0 : 076 003             	MVI	A,MRST
      71/       2 : 323 020             	OUT	SIO1S		; Reset the UART
      72/       4 : 076 025             	MVI	A,15h		; Settings: No RI, No XI, RTS Low, 8N1, /16
      73/       6 : 323 020             	OUT	SIO1S		; Configure the UART with above settings
      74/      10 :                     
      75/      10 : 333 020             LOOP:	IN	SIO1S		; Check serial I/O status bit
      76/      12 : 346 001             	ANI	RCVD		; If no data received...
      77/      14 : 312 010 000         	JZ	LOOP		; ...spin wheels: continue checking status. Else...
      78/      17 : 333 021             	IN	SIO1D		; ...read the character
      79/      21 : 323 021             	OUT	SIO1D		; ...echo it
      80/      23 : 303 010 000         	JMP	LOOP		; ...wait for next character
      81/      26 :                     	
      82/      26 :                     ; Data segment
      83/      26 :                     
      84/     400 :                     	ORG	100h
      85/     400 :                     
      86/     400 :                     	END			; End
 AS V1.42 Beta [Bld 183] - Source File hello-8800.asm - Page 3 - 12/04/2020 09:35:07 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                "12/04/2020" - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - |  LOOP :                          10 C |
*MACEXP :                         7 - | *MOMCPU :                    100200 - |
*MOMCPUNAME :                "8080" - |  MRST :                           3 - |
*NESTMAX :                      400 - | *PACKING :                        0 - |
*PADDING :                        1 - |  RCVD :                           1 - |
*RELAXED :                        0 - |  SIO1D :                         21 - |
 SIO1S :                         20 - | *TIME :               "09:35:07 PM" - |
*TRUE :                           1 - | *VERSION :                    12057 - |
*Z80SYNTAX :                      0 - |

     34 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 183] - Source File hello-8800.asm - Page 4 - 12/04/2020 09:35:07 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.00 seconds assembly time

     87 lines source file
      1 pass
      0 errors
      0 warnings
